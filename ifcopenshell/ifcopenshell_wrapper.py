# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ifcopenshell_wrapper', [dirname(__file__)])
        except ImportError:
            import _ifcopenshell_wrapper
            return _ifcopenshell_wrapper
        if fp is not None:
            try:
                _mod = imp.load_module('_ifcopenshell_wrapper', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ifcopenshell_wrapper = swig_import_helper()
    del swig_import_helper
else:
    import _ifcopenshell_wrapper
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ifcopenshell_wrapper.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _ifcopenshell_wrapper.SwigPyIterator_value(self)
    def incr(self, n=1): return _ifcopenshell_wrapper.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _ifcopenshell_wrapper.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _ifcopenshell_wrapper.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _ifcopenshell_wrapper.SwigPyIterator_equal(self, *args)
    def copy(self): return _ifcopenshell_wrapper.SwigPyIterator_copy(self)
    def next(self): return _ifcopenshell_wrapper.SwigPyIterator_next(self)
    def __next__(self): return _ifcopenshell_wrapper.SwigPyIterator___next__(self)
    def previous(self): return _ifcopenshell_wrapper.SwigPyIterator_previous(self)
    def advance(self, *args): return _ifcopenshell_wrapper.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _ifcopenshell_wrapper.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _ifcopenshell_wrapper.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _ifcopenshell_wrapper.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _ifcopenshell_wrapper.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _ifcopenshell_wrapper.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _ifcopenshell_wrapper.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _ifcopenshell_wrapper.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class settings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, settings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, settings, name)
    __repr__ = _swig_repr
    WELD_VERTICES = _ifcopenshell_wrapper.settings_WELD_VERTICES
    USE_WORLD_COORDS = _ifcopenshell_wrapper.settings_USE_WORLD_COORDS
    CONVERT_BACK_UNITS = _ifcopenshell_wrapper.settings_CONVERT_BACK_UNITS
    USE_BREP_DATA = _ifcopenshell_wrapper.settings_USE_BREP_DATA
    SEW_SHELLS = _ifcopenshell_wrapper.settings_SEW_SHELLS
    FASTER_BOOLEANS = _ifcopenshell_wrapper.settings_FASTER_BOOLEANS
    FORCE_CCW_FACE_ORIENTATION = _ifcopenshell_wrapper.settings_FORCE_CCW_FACE_ORIENTATION
    DISABLE_OPENING_SUBTRACTIONS = _ifcopenshell_wrapper.settings_DISABLE_OPENING_SUBTRACTIONS
    DISABLE_TRIANGULATION = _ifcopenshell_wrapper.settings_DISABLE_TRIANGULATION
    APPLY_DEFAULT_MATERIALS = _ifcopenshell_wrapper.settings_APPLY_DEFAULT_MATERIALS
    def __init__(self): 
        this = _ifcopenshell_wrapper.new_settings()
        try: self.this.append(this)
        except: self.this = this
    def weld_vertices(self, *args): return _ifcopenshell_wrapper.settings_weld_vertices(self, *args)
    def use_world_coords(self, *args): return _ifcopenshell_wrapper.settings_use_world_coords(self, *args)
    def convert_back_units(self, *args): return _ifcopenshell_wrapper.settings_convert_back_units(self, *args)
    def use_brep_data(self, *args): return _ifcopenshell_wrapper.settings_use_brep_data(self, *args)
    def sew_shells(self, *args): return _ifcopenshell_wrapper.settings_sew_shells(self, *args)
    def faster_booleans(self, *args): return _ifcopenshell_wrapper.settings_faster_booleans(self, *args)
    def force_ccw_face_orientation(self, *args): return _ifcopenshell_wrapper.settings_force_ccw_face_orientation(self, *args)
    def disable_opening_subtractions(self, *args): return _ifcopenshell_wrapper.settings_disable_opening_subtractions(self, *args)
    def disable_triangulation(self, *args): return _ifcopenshell_wrapper.settings_disable_triangulation(self, *args)
    def apply_default_materials(self, *args): return _ifcopenshell_wrapper.settings_apply_default_materials(self, *args)
    def deflection_tolerance(self, *args): return _ifcopenshell_wrapper.settings_deflection_tolerance(self, *args)
    def set(self, *args): return _ifcopenshell_wrapper.settings_set(self, *args)
    attrs = ("convert_back_units", "deflection_tolerance", "disable_opening_subtractions", "disable_triangulation", "faster_booleans", "force_ccw_face_orientation", "sew_shells", "use_brep_data", "use_world_coords", "weld_vertices")
    def __repr__(self):
    	return "%s(%s)"%(self.__class__.__name__, ",".join(tuple("%s=%r"%(a, getattr(self, a)()) for a in self.attrs)))

    __swig_destroy__ = _ifcopenshell_wrapper.delete_settings
    __del__ = lambda self : None;
settings_swigregister = _ifcopenshell_wrapper.settings_swigregister
settings_swigregister(settings)

class ElementSettings(settings):
    __swig_setmethods__ = {}
    for _s in [settings]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElementSettings, name, value)
    __swig_getmethods__ = {}
    for _s in [settings]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ElementSettings, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ifcopenshell_wrapper.new_ElementSettings(*args)
        try: self.this.append(this)
        except: self.this = this
    def unit_magnitude(self): return _ifcopenshell_wrapper.ElementSettings_unit_magnitude(self)
    def element_type(self): return _ifcopenshell_wrapper.ElementSettings_element_type(self)
    __swig_destroy__ = _ifcopenshell_wrapper.delete_ElementSettings
    __del__ = lambda self : None;
ElementSettings_swigregister = _ifcopenshell_wrapper.ElementSettings_swigregister
ElementSettings_swigregister(ElementSettings)

class Material(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Material, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Material, name)
    __repr__ = _swig_repr
    def __init__(self, style=None): 
        this = _ifcopenshell_wrapper.new_Material(style)
        try: self.this.append(this)
        except: self.this = this
    def hasDiffuse(self): return _ifcopenshell_wrapper.Material_hasDiffuse(self)
    def hasSpecular(self): return _ifcopenshell_wrapper.Material_hasSpecular(self)
    def hasTransparency(self): return _ifcopenshell_wrapper.Material_hasTransparency(self)
    def hasSpecularity(self): return _ifcopenshell_wrapper.Material_hasSpecularity(self)
    def diffuse(self): return _ifcopenshell_wrapper.Material_diffuse(self)
    def specular(self): return _ifcopenshell_wrapper.Material_specular(self)
    def transparency(self): return _ifcopenshell_wrapper.Material_transparency(self)
    def specularity(self): return _ifcopenshell_wrapper.Material_specularity(self)
    def name(self): return _ifcopenshell_wrapper.Material_name(self)
    def __eq__(self, *args): return _ifcopenshell_wrapper.Material___eq__(self, *args)
    if _newclass:
    	# Hide the getters with read-only property implementations
    	has_diffuse = property(hasDiffuse)
    	has_specular = property(hasSpecular)
    	has_transparency = property(hasTransparency)
    	has_specularity = property(hasSpecularity)
    	diffuse = property(diffuse)
    	specular = property(specular)
    	transparency = property(transparency)
    	specularity = property(specularity)
    	name = property(name)
      
    __swig_destroy__ = _ifcopenshell_wrapper.delete_Material
    __del__ = lambda self : None;
Material_swigregister = _ifcopenshell_wrapper.Material_swigregister
Material_swigregister(Material)

class Representation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Representation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Representation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ifcopenshell_wrapper.new_Representation(*args)
        try: self.this.append(this)
        except: self.this = this
    def settings(self): return _ifcopenshell_wrapper.Representation_settings(self)
    __swig_destroy__ = _ifcopenshell_wrapper.delete_Representation
    __del__ = lambda self : None;
Representation_swigregister = _ifcopenshell_wrapper.Representation_swigregister
Representation_swigregister(Representation)

class BRep(Representation):
    __swig_setmethods__ = {}
    for _s in [Representation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BRep, name, value)
    __swig_getmethods__ = {}
    for _s in [Representation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BRep, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ifcopenshell_wrapper.new_BRep(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ifcopenshell_wrapper.delete_BRep
    __del__ = lambda self : None;
    def begin(self): return _ifcopenshell_wrapper.BRep_begin(self)
    def end(self): return _ifcopenshell_wrapper.BRep_end(self)
    def getId(self): return _ifcopenshell_wrapper.BRep_getId(self)
BRep_swigregister = _ifcopenshell_wrapper.BRep_swigregister
BRep_swigregister(BRep)

class Serialization(Representation):
    __swig_setmethods__ = {}
    for _s in [Representation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Serialization, name, value)
    __swig_getmethods__ = {}
    for _s in [Representation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Serialization, name)
    __repr__ = _swig_repr
    def id(self): return _ifcopenshell_wrapper.Serialization_id(self)
    def brep_data(self): return _ifcopenshell_wrapper.Serialization_brep_data(self)
    def __init__(self, *args): 
        this = _ifcopenshell_wrapper.new_Serialization(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ifcopenshell_wrapper.delete_Serialization
    __del__ = lambda self : None;
    if _newclass:
    	# Hide the getters with read-only property implementations
    	id = property(id)
    	brep_data = property(brep_data)
      
Serialization_swigregister = _ifcopenshell_wrapper.Serialization_swigregister
Serialization_swigregister(Serialization)


def create_shape(*args):
  return _ifcopenshell_wrapper.create_shape(*args)
create_shape = _ifcopenshell_wrapper.create_shape
class iterator_single_precision(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iterator_single_precision, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iterator_single_precision, name)
    __repr__ = _swig_repr
    def findContext(self): return _ifcopenshell_wrapper.iterator_single_precision_findContext(self)
    def progress(self): return _ifcopenshell_wrapper.iterator_single_precision_progress(self)
    def getUnitName(self): return _ifcopenshell_wrapper.iterator_single_precision_getUnitName(self)
    def getUnitMagnitude(self): return _ifcopenshell_wrapper.iterator_single_precision_getUnitMagnitude(self)
    def getLog(self): return _ifcopenshell_wrapper.iterator_single_precision_getLog(self)
    def getFile(self): return _ifcopenshell_wrapper.iterator_single_precision_getFile(self)
    def includeEntities(self, *args): return _ifcopenshell_wrapper.iterator_single_precision_includeEntities(self, *args)
    def excludeEntities(self, *args): return _ifcopenshell_wrapper.iterator_single_precision_excludeEntities(self, *args)
    def next(self): return _ifcopenshell_wrapper.iterator_single_precision_next(self)
    def get(self): return _ifcopenshell_wrapper.iterator_single_precision_get(self)
    def getObject(self, *args): return _ifcopenshell_wrapper.iterator_single_precision_getObject(self, *args)
    def create(self): return _ifcopenshell_wrapper.iterator_single_precision_create(self)
    def __init__(self, *args): 
        this = _ifcopenshell_wrapper.new_iterator_single_precision(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ifcopenshell_wrapper.delete_iterator_single_precision
    __del__ = lambda self : None;
    __swig_getmethods__["mantissa_size"] = lambda x: _ifcopenshell_wrapper.iterator_single_precision_mantissa_size
    if _newclass:mantissa_size = staticmethod(_ifcopenshell_wrapper.iterator_single_precision_mantissa_size)
iterator_single_precision_swigregister = _ifcopenshell_wrapper.iterator_single_precision_swigregister
iterator_single_precision_swigregister(iterator_single_precision)

def iterator_single_precision_mantissa_size():
  return _ifcopenshell_wrapper.iterator_single_precision_mantissa_size()
iterator_single_precision_mantissa_size = _ifcopenshell_wrapper.iterator_single_precision_mantissa_size

class iterator_double_precision(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iterator_double_precision, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iterator_double_precision, name)
    __repr__ = _swig_repr
    def findContext(self): return _ifcopenshell_wrapper.iterator_double_precision_findContext(self)
    def progress(self): return _ifcopenshell_wrapper.iterator_double_precision_progress(self)
    def getUnitName(self): return _ifcopenshell_wrapper.iterator_double_precision_getUnitName(self)
    def getUnitMagnitude(self): return _ifcopenshell_wrapper.iterator_double_precision_getUnitMagnitude(self)
    def getLog(self): return _ifcopenshell_wrapper.iterator_double_precision_getLog(self)
    def getFile(self): return _ifcopenshell_wrapper.iterator_double_precision_getFile(self)
    def includeEntities(self, *args): return _ifcopenshell_wrapper.iterator_double_precision_includeEntities(self, *args)
    def excludeEntities(self, *args): return _ifcopenshell_wrapper.iterator_double_precision_excludeEntities(self, *args)
    def next(self): return _ifcopenshell_wrapper.iterator_double_precision_next(self)
    def get(self): return _ifcopenshell_wrapper.iterator_double_precision_get(self)
    def getObject(self, *args): return _ifcopenshell_wrapper.iterator_double_precision_getObject(self, *args)
    def create(self): return _ifcopenshell_wrapper.iterator_double_precision_create(self)
    def __init__(self, *args): 
        this = _ifcopenshell_wrapper.new_iterator_double_precision(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ifcopenshell_wrapper.delete_iterator_double_precision
    __del__ = lambda self : None;
    __swig_getmethods__["mantissa_size"] = lambda x: _ifcopenshell_wrapper.iterator_double_precision_mantissa_size
    if _newclass:mantissa_size = staticmethod(_ifcopenshell_wrapper.iterator_double_precision_mantissa_size)
iterator_double_precision_swigregister = _ifcopenshell_wrapper.iterator_double_precision_swigregister
iterator_double_precision_swigregister(iterator_double_precision)

def iterator_double_precision_mantissa_size():
  return _ifcopenshell_wrapper.iterator_double_precision_mantissa_size()
iterator_double_precision_mantissa_size = _ifcopenshell_wrapper.iterator_double_precision_mantissa_size

class element_single_precision(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, element_single_precision, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, element_single_precision, name)
    __repr__ = _swig_repr
    def id(self): return _ifcopenshell_wrapper.element_single_precision_id(self)
    def parent_id(self): return _ifcopenshell_wrapper.element_single_precision_parent_id(self)
    def name(self): return _ifcopenshell_wrapper.element_single_precision_name(self)
    def type(self): return _ifcopenshell_wrapper.element_single_precision_type(self)
    def guid(self): return _ifcopenshell_wrapper.element_single_precision_guid(self)
    def transformation(self): return _ifcopenshell_wrapper.element_single_precision_transformation(self)
    def __init__(self, *args): 
        this = _ifcopenshell_wrapper.new_element_single_precision(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ifcopenshell_wrapper.delete_element_single_precision
    __del__ = lambda self : None;
    if _newclass:
    	# Hide the getters with read-only property implementations
    	id = property(id)
    	parent_id = property(parent_id)
    	name = property(name)
    	type = property(type)
    	guid = property(guid)
    	transformation = property(transformation)
      
element_single_precision_swigregister = _ifcopenshell_wrapper.element_single_precision_swigregister
element_single_precision_swigregister(element_single_precision)

class element_double_precision(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, element_double_precision, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, element_double_precision, name)
    __repr__ = _swig_repr
    def id(self): return _ifcopenshell_wrapper.element_double_precision_id(self)
    def parent_id(self): return _ifcopenshell_wrapper.element_double_precision_parent_id(self)
    def name(self): return _ifcopenshell_wrapper.element_double_precision_name(self)
    def type(self): return _ifcopenshell_wrapper.element_double_precision_type(self)
    def guid(self): return _ifcopenshell_wrapper.element_double_precision_guid(self)
    def transformation(self): return _ifcopenshell_wrapper.element_double_precision_transformation(self)
    def __init__(self, *args): 
        this = _ifcopenshell_wrapper.new_element_double_precision(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ifcopenshell_wrapper.delete_element_double_precision
    __del__ = lambda self : None;
    if _newclass:
    	# Hide the getters with read-only property implementations
    	id = property(id)
    	parent_id = property(parent_id)
    	name = property(name)
    	type = property(type)
    	guid = property(guid)
    	transformation = property(transformation)
      
element_double_precision_swigregister = _ifcopenshell_wrapper.element_double_precision_swigregister
element_double_precision_swigregister(element_double_precision)

class triangulation_element_single_precision(element_single_precision):
    __swig_setmethods__ = {}
    for _s in [element_single_precision]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, triangulation_element_single_precision, name, value)
    __swig_getmethods__ = {}
    for _s in [element_single_precision]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, triangulation_element_single_precision, name)
    __repr__ = _swig_repr
    def geometry(self): return _ifcopenshell_wrapper.triangulation_element_single_precision_geometry(self)
    def __init__(self, *args): 
        this = _ifcopenshell_wrapper.new_triangulation_element_single_precision(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ifcopenshell_wrapper.delete_triangulation_element_single_precision
    __del__ = lambda self : None;
    if _newclass:
    	# Hide the getters with read-only property implementations
    	geometry = property(geometry)
      
triangulation_element_single_precision_swigregister = _ifcopenshell_wrapper.triangulation_element_single_precision_swigregister
triangulation_element_single_precision_swigregister(triangulation_element_single_precision)

class triangulation_element_double_precision(element_double_precision):
    __swig_setmethods__ = {}
    for _s in [element_double_precision]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, triangulation_element_double_precision, name, value)
    __swig_getmethods__ = {}
    for _s in [element_double_precision]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, triangulation_element_double_precision, name)
    __repr__ = _swig_repr
    def geometry(self): return _ifcopenshell_wrapper.triangulation_element_double_precision_geometry(self)
    def __init__(self, *args): 
        this = _ifcopenshell_wrapper.new_triangulation_element_double_precision(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ifcopenshell_wrapper.delete_triangulation_element_double_precision
    __del__ = lambda self : None;
    if _newclass:
    	# Hide the getters with read-only property implementations
    	geometry = property(geometry)
      
triangulation_element_double_precision_swigregister = _ifcopenshell_wrapper.triangulation_element_double_precision_swigregister
triangulation_element_double_precision_swigregister(triangulation_element_double_precision)

class serialized_element_single_precision(element_single_precision):
    __swig_setmethods__ = {}
    for _s in [element_single_precision]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, serialized_element_single_precision, name, value)
    __swig_getmethods__ = {}
    for _s in [element_single_precision]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, serialized_element_single_precision, name)
    __repr__ = _swig_repr
    def geometry(self): return _ifcopenshell_wrapper.serialized_element_single_precision_geometry(self)
    def __init__(self, *args): 
        this = _ifcopenshell_wrapper.new_serialized_element_single_precision(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ifcopenshell_wrapper.delete_serialized_element_single_precision
    __del__ = lambda self : None;
    if _newclass:
    	# Hide the getters with read-only property implementations
    	geometry = property(geometry)
      
serialized_element_single_precision_swigregister = _ifcopenshell_wrapper.serialized_element_single_precision_swigregister
serialized_element_single_precision_swigregister(serialized_element_single_precision)

class serialized_element_double_precision(element_double_precision):
    __swig_setmethods__ = {}
    for _s in [element_double_precision]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, serialized_element_double_precision, name, value)
    __swig_getmethods__ = {}
    for _s in [element_double_precision]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, serialized_element_double_precision, name)
    __repr__ = _swig_repr
    def geometry(self): return _ifcopenshell_wrapper.serialized_element_double_precision_geometry(self)
    def __init__(self, *args): 
        this = _ifcopenshell_wrapper.new_serialized_element_double_precision(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ifcopenshell_wrapper.delete_serialized_element_double_precision
    __del__ = lambda self : None;
    if _newclass:
    	# Hide the getters with read-only property implementations
    	geometry = property(geometry)
      
serialized_element_double_precision_swigregister = _ifcopenshell_wrapper.serialized_element_double_precision_swigregister
serialized_element_double_precision_swigregister(serialized_element_double_precision)

class transformation_single_precision(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, transformation_single_precision, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, transformation_single_precision, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ifcopenshell_wrapper.new_transformation_single_precision(*args)
        try: self.this.append(this)
        except: self.this = this
    def data(self): return _ifcopenshell_wrapper.transformation_single_precision_data(self)
    def matrix(self): return _ifcopenshell_wrapper.transformation_single_precision_matrix(self)
    if _newclass:
    	# Hide the getters with read-only property implementations
    	matrix = property(matrix)
      
    __swig_destroy__ = _ifcopenshell_wrapper.delete_transformation_single_precision
    __del__ = lambda self : None;
transformation_single_precision_swigregister = _ifcopenshell_wrapper.transformation_single_precision_swigregister
transformation_single_precision_swigregister(transformation_single_precision)

class transformation_double_precision(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, transformation_double_precision, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, transformation_double_precision, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ifcopenshell_wrapper.new_transformation_double_precision(*args)
        try: self.this.append(this)
        except: self.this = this
    def data(self): return _ifcopenshell_wrapper.transformation_double_precision_data(self)
    def matrix(self): return _ifcopenshell_wrapper.transformation_double_precision_matrix(self)
    if _newclass:
    	# Hide the getters with read-only property implementations
    	matrix = property(matrix)
      
    __swig_destroy__ = _ifcopenshell_wrapper.delete_transformation_double_precision
    __del__ = lambda self : None;
transformation_double_precision_swigregister = _ifcopenshell_wrapper.transformation_double_precision_swigregister
transformation_double_precision_swigregister(transformation_double_precision)

class matrix_single_precision(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, matrix_single_precision, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, matrix_single_precision, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ifcopenshell_wrapper.new_matrix_single_precision(*args)
        try: self.this.append(this)
        except: self.this = this
    def data(self): return _ifcopenshell_wrapper.matrix_single_precision_data(self)
    if _newclass:
    	# Hide the getters with read-only property implementations
    	data = property(data)
      
    __swig_destroy__ = _ifcopenshell_wrapper.delete_matrix_single_precision
    __del__ = lambda self : None;
matrix_single_precision_swigregister = _ifcopenshell_wrapper.matrix_single_precision_swigregister
matrix_single_precision_swigregister(matrix_single_precision)

class matrix_double_precision(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, matrix_double_precision, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, matrix_double_precision, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ifcopenshell_wrapper.new_matrix_double_precision(*args)
        try: self.this.append(this)
        except: self.this = this
    def data(self): return _ifcopenshell_wrapper.matrix_double_precision_data(self)
    if _newclass:
    	# Hide the getters with read-only property implementations
    	data = property(data)
      
    __swig_destroy__ = _ifcopenshell_wrapper.delete_matrix_double_precision
    __del__ = lambda self : None;
matrix_double_precision_swigregister = _ifcopenshell_wrapper.matrix_double_precision_swigregister
matrix_double_precision_swigregister(matrix_double_precision)

class triangulation_single_precision(Representation):
    __swig_setmethods__ = {}
    for _s in [Representation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, triangulation_single_precision, name, value)
    __swig_getmethods__ = {}
    for _s in [Representation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, triangulation_single_precision, name)
    __repr__ = _swig_repr
    def id(self): return _ifcopenshell_wrapper.triangulation_single_precision_id(self)
    def verts(self): return _ifcopenshell_wrapper.triangulation_single_precision_verts(self)
    def faces(self): return _ifcopenshell_wrapper.triangulation_single_precision_faces(self)
    def edges(self): return _ifcopenshell_wrapper.triangulation_single_precision_edges(self)
    def normals(self): return _ifcopenshell_wrapper.triangulation_single_precision_normals(self)
    def material_ids(self): return _ifcopenshell_wrapper.triangulation_single_precision_material_ids(self)
    def materials(self): return _ifcopenshell_wrapper.triangulation_single_precision_materials(self)
    def __init__(self, *args): 
        this = _ifcopenshell_wrapper.new_triangulation_single_precision(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ifcopenshell_wrapper.delete_triangulation_single_precision
    __del__ = lambda self : None;
    if _newclass:
    	# Hide the getters with read-only property implementations
    	id = property(id)
    	verts = property(verts)
    	faces = property(faces)
    	edges = property(edges)
    	normals = property(normals)
    	material_ids = property(material_ids)
    	materials = property(materials)
      
triangulation_single_precision_swigregister = _ifcopenshell_wrapper.triangulation_single_precision_swigregister
triangulation_single_precision_swigregister(triangulation_single_precision)

class triangulation_double_precision(Representation):
    __swig_setmethods__ = {}
    for _s in [Representation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, triangulation_double_precision, name, value)
    __swig_getmethods__ = {}
    for _s in [Representation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, triangulation_double_precision, name)
    __repr__ = _swig_repr
    def id(self): return _ifcopenshell_wrapper.triangulation_double_precision_id(self)
    def verts(self): return _ifcopenshell_wrapper.triangulation_double_precision_verts(self)
    def faces(self): return _ifcopenshell_wrapper.triangulation_double_precision_faces(self)
    def edges(self): return _ifcopenshell_wrapper.triangulation_double_precision_edges(self)
    def normals(self): return _ifcopenshell_wrapper.triangulation_double_precision_normals(self)
    def material_ids(self): return _ifcopenshell_wrapper.triangulation_double_precision_material_ids(self)
    def materials(self): return _ifcopenshell_wrapper.triangulation_double_precision_materials(self)
    def __init__(self, *args): 
        this = _ifcopenshell_wrapper.new_triangulation_double_precision(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ifcopenshell_wrapper.delete_triangulation_double_precision
    __del__ = lambda self : None;
    if _newclass:
    	# Hide the getters with read-only property implementations
    	id = property(id)
    	verts = property(verts)
    	faces = property(faces)
    	edges = property(edges)
    	normals = property(normals)
    	material_ids = property(material_ids)
    	materials = property(materials)
      
triangulation_double_precision_swigregister = _ifcopenshell_wrapper.triangulation_double_precision_swigregister
triangulation_double_precision_swigregister(triangulation_double_precision)

class IfcAbstractEntity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IfcAbstractEntity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IfcAbstractEntity, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ifcopenshell_wrapper.delete_IfcAbstractEntity
    __del__ = lambda self : None;
IfcAbstractEntity_swigregister = _ifcopenshell_wrapper.IfcAbstractEntity_swigregister
IfcAbstractEntity_swigregister(IfcAbstractEntity)

class IfcBaseEntity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IfcBaseEntity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IfcBaseEntity, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ifcopenshell_wrapper.delete_IfcBaseEntity
    __del__ = lambda self : None;
IfcBaseEntity_swigregister = _ifcopenshell_wrapper.IfcBaseEntity_swigregister
IfcBaseEntity_swigregister(IfcBaseEntity)

class HeaderEntity(IfcAbstractEntity):
    __swig_setmethods__ = {}
    for _s in [IfcAbstractEntity]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeaderEntity, name, value)
    __swig_getmethods__ = {}
    for _s in [IfcAbstractEntity]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HeaderEntity, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    def getArgument(self, *args): return _ifcopenshell_wrapper.HeaderEntity_getArgument(self, *args)
    def getInverse(self, *args): return _ifcopenshell_wrapper.HeaderEntity_getInverse(self, *args)
    def datatype(self): return _ifcopenshell_wrapper.HeaderEntity_datatype(self)
    def __len__(self): return _ifcopenshell_wrapper.HeaderEntity___len__(self)
    def type(self): return _ifcopenshell_wrapper.HeaderEntity_type(self)
    def __repr__(self, upper=False): return _ifcopenshell_wrapper.HeaderEntity___repr__(self, upper)
    def id(self): return _ifcopenshell_wrapper.HeaderEntity_id(self)
    def isWritable(self): return _ifcopenshell_wrapper.HeaderEntity_isWritable(self)
HeaderEntity_swigregister = _ifcopenshell_wrapper.HeaderEntity_swigregister
HeaderEntity_swigregister(HeaderEntity)

class FileDescription(HeaderEntity):
    __swig_setmethods__ = {}
    for _s in [HeaderEntity]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileDescription, name, value)
    __swig_getmethods__ = {}
    for _s in [HeaderEntity]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileDescription, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def description(self, *args): return _ifcopenshell_wrapper.FileDescription_description(self, *args)
    def implementation_level(self, *args): return _ifcopenshell_wrapper.FileDescription_implementation_level(self, *args)
    if _newclass:
    	# Hide the getters with read-write property implementations
    	__swig_getmethods__["description"] = description
    	__swig_setmethods__["description"] = description
    	description = property(description, description)
    	__swig_getmethods__["implementation_level"] = implementation_level
    	__swig_setmethods__["implementation_level"] = implementation_level
    	implementation_level = property(implementation_level, implementation_level)
      
    __swig_destroy__ = _ifcopenshell_wrapper.delete_FileDescription
    __del__ = lambda self : None;
FileDescription_swigregister = _ifcopenshell_wrapper.FileDescription_swigregister
FileDescription_swigregister(FileDescription)

class FileName(HeaderEntity):
    __swig_setmethods__ = {}
    for _s in [HeaderEntity]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileName, name, value)
    __swig_getmethods__ = {}
    for _s in [HeaderEntity]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileName, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def name(self, *args): return _ifcopenshell_wrapper.FileName_name(self, *args)
    def time_stamp(self, *args): return _ifcopenshell_wrapper.FileName_time_stamp(self, *args)
    def author(self, *args): return _ifcopenshell_wrapper.FileName_author(self, *args)
    def organization(self, *args): return _ifcopenshell_wrapper.FileName_organization(self, *args)
    def preprocessor_version(self, *args): return _ifcopenshell_wrapper.FileName_preprocessor_version(self, *args)
    def originating_system(self, *args): return _ifcopenshell_wrapper.FileName_originating_system(self, *args)
    def authorization(self, *args): return _ifcopenshell_wrapper.FileName_authorization(self, *args)
    if _newclass:
    	# Hide the getters with read-write property implementations
    	__swig_getmethods__["name"] = name
    	__swig_setmethods__["name"] = name
    	name = property(name, name)
    	__swig_getmethods__["time_stamp"] = time_stamp
    	__swig_setmethods__["time_stamp"] = time_stamp
    	time_stamp = property(time_stamp, time_stamp)
    	__swig_getmethods__["author"] = author
    	__swig_setmethods__["author"] = author
    	author = property(author, author)
    	__swig_getmethods__["organization"] = organization
    	__swig_setmethods__["organization"] = organization
    	organization = property(organization, organization)
    	__swig_getmethods__["preprocessor_version"] = preprocessor_version
    	__swig_setmethods__["preprocessor_version"] = preprocessor_version
    	preprocessor_version = property(preprocessor_version, preprocessor_version)
    	__swig_getmethods__["originating_system"] = originating_system
    	__swig_setmethods__["originating_system"] = originating_system
    	originating_system = property(originating_system, originating_system)
    	__swig_getmethods__["authorization"] = authorization
    	__swig_setmethods__["authorization"] = authorization
    	authorization = property(authorization, authorization)
      
    __swig_destroy__ = _ifcopenshell_wrapper.delete_FileName
    __del__ = lambda self : None;
FileName_swigregister = _ifcopenshell_wrapper.FileName_swigregister
FileName_swigregister(FileName)

class FileSchema(HeaderEntity):
    __swig_setmethods__ = {}
    for _s in [HeaderEntity]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileSchema, name, value)
    __swig_getmethods__ = {}
    for _s in [HeaderEntity]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileSchema, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def schema_identifiers(self, *args): return _ifcopenshell_wrapper.FileSchema_schema_identifiers(self, *args)
    if _newclass:
    	# Hide the getters with read-write property implementations
    	__swig_getmethods__["schema_identifiers"] = schema_identifiers
    	__swig_setmethods__["schema_identifiers"] = schema_identifiers
    	schema_identifiers = property(schema_identifiers, schema_identifiers)
      
    __swig_destroy__ = _ifcopenshell_wrapper.delete_FileSchema
    __del__ = lambda self : None;
FileSchema_swigregister = _ifcopenshell_wrapper.FileSchema_swigregister
FileSchema_swigregister(FileSchema)

class IfcSpfHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IfcSpfHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IfcSpfHeader, name)
    __repr__ = _swig_repr
    def __init__(self, lexer=None): 
        this = _ifcopenshell_wrapper.new_IfcSpfHeader(lexer)
        try: self.this.append(this)
        except: self.this = this
    def read(self): return _ifcopenshell_wrapper.IfcSpfHeader_read(self)
    def tryRead(self): return _ifcopenshell_wrapper.IfcSpfHeader_tryRead(self)
    def write(self, *args): return _ifcopenshell_wrapper.IfcSpfHeader_write(self, *args)
    def file_description(self, *args): return _ifcopenshell_wrapper.IfcSpfHeader_file_description(self, *args)
    def file_name(self, *args): return _ifcopenshell_wrapper.IfcSpfHeader_file_name(self, *args)
    def file_schema(self, *args): return _ifcopenshell_wrapper.IfcSpfHeader_file_schema(self, *args)
    if _newclass:
    	# Hide the getters with read-only property implementations
    	file_description = property(file_description)
    	file_name = property(file_name)
    	file_schema = property(file_schema)
      
    __swig_destroy__ = _ifcopenshell_wrapper.delete_IfcSpfHeader
    __del__ = lambda self : None;
IfcSpfHeader_swigregister = _ifcopenshell_wrapper.IfcSpfHeader_swigregister
IfcSpfHeader_swigregister(IfcSpfHeader)

class file(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, file, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, file, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stream"] = _ifcopenshell_wrapper.file_stream_set
    __swig_getmethods__["stream"] = _ifcopenshell_wrapper.file_stream_get
    if _newclass:stream = _swig_property(_ifcopenshell_wrapper.file_stream_get, _ifcopenshell_wrapper.file_stream_set)
    def __init__(self, create_latebound_entities=False): 
        this = _ifcopenshell_wrapper.new_file(create_latebound_entities)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ifcopenshell_wrapper.delete_file
    __del__ = lambda self : None;
    def begin(self): return _ifcopenshell_wrapper.file_begin(self)
    def end(self): return _ifcopenshell_wrapper.file_end(self)
    def by_type(self, *args): return _ifcopenshell_wrapper.file_by_type(self, *args)
    def entitiesByReference(self, *args): return _ifcopenshell_wrapper.file_entitiesByReference(self, *args)
    def getInverse(self, *args): return _ifcopenshell_wrapper.file_getInverse(self, *args)
    def FreshId(self): return _ifcopenshell_wrapper.file_FreshId(self)
    def addEntities(self, *args): return _ifcopenshell_wrapper.file_addEntities(self, *args)
    def header(self, *args): return _ifcopenshell_wrapper.file_header(self, *args)
    def createTimestamp(self): return _ifcopenshell_wrapper.file_createTimestamp(self)
    def create_latebound_entities(self): return _ifcopenshell_wrapper.file_create_latebound_entities(self)
    def getUnit(self, *args): return _ifcopenshell_wrapper.file_getUnit(self, *args)
    def by_id(self, *args): return _ifcopenshell_wrapper.file_by_id(self, *args)
    def by_guid(self, *args): return _ifcopenshell_wrapper.file_by_guid(self, *args)
    def add(self, *args): return _ifcopenshell_wrapper.file_add(self, *args)
    def remove(self, *args): return _ifcopenshell_wrapper.file_remove(self, *args)
    def traverse(self, *args): return _ifcopenshell_wrapper.file_traverse(self, *args)
    def write(self, *args): return _ifcopenshell_wrapper.file_write(self, *args)
    def entity_names(self): return _ifcopenshell_wrapper.file_entity_names(self)
    if _newclass:
    	# Hide the getters with read-only property implementations
    	header = property(header)
      
file_swigregister = _ifcopenshell_wrapper.file_swigregister
file_swigregister(file)

class entity_instance(IfcBaseEntity):
    __swig_setmethods__ = {}
    for _s in [IfcBaseEntity]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, entity_instance, name, value)
    __swig_getmethods__ = {}
    for _s in [IfcBaseEntity]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, entity_instance, name)
    def __init__(self, *args): 
        this = _ifcopenshell_wrapper.new_entity_instance(*args)
        try: self.this.append(this)
        except: self.this = this
    def is_a(self, *args): return _ifcopenshell_wrapper.entity_instance_is_a(self, *args)
    def id(self): return _ifcopenshell_wrapper.entity_instance_id(self)
    def __len__(self): return _ifcopenshell_wrapper.entity_instance___len__(self)
    def get_argument_type(self, *args): return _ifcopenshell_wrapper.entity_instance_get_argument_type(self, *args)
    def getArgumentEntity(self, *args): return _ifcopenshell_wrapper.entity_instance_getArgumentEntity(self, *args)
    def get_argument_name(self, *args): return _ifcopenshell_wrapper.entity_instance_get_argument_name(self, *args)
    def get_argument_index(self, *args): return _ifcopenshell_wrapper.entity_instance_get_argument_index(self, *args)
    def get_argument_optionality(self, *args): return _ifcopenshell_wrapper.entity_instance_get_argument_optionality(self, *args)
    def get_inverse(self, *args): return _ifcopenshell_wrapper.entity_instance_get_inverse(self, *args)
    def _set_argument(self, *args): return _ifcopenshell_wrapper.entity_instance__set_argument(self, *args)
    def __repr__(self): return _ifcopenshell_wrapper.entity_instance___repr__(self)
    def get_argument(self, *args): return _ifcopenshell_wrapper.entity_instance_get_argument(self, *args)
    def is_valid(self): return _ifcopenshell_wrapper.entity_instance_is_valid(self)
    set_argument = lambda self,x,y: self._set_argument(x) if y is None else self._set_argument(x,y)

    __swig_destroy__ = _ifcopenshell_wrapper.delete_entity_instance
    __del__ = lambda self : None;
entity_instance_swigregister = _ifcopenshell_wrapper.entity_instance_swigregister
entity_instance_swigregister(entity_instance)


def open(*args):
  return _ifcopenshell_wrapper.open(*args)
open = _ifcopenshell_wrapper.open
class int_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, int_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, int_vector, name)
    __repr__ = _swig_repr
    def iterator(self): return _ifcopenshell_wrapper.int_vector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ifcopenshell_wrapper.int_vector___nonzero__(self)
    def __bool__(self): return _ifcopenshell_wrapper.int_vector___bool__(self)
    def __len__(self): return _ifcopenshell_wrapper.int_vector___len__(self)
    def pop(self): return _ifcopenshell_wrapper.int_vector_pop(self)
    def __getslice__(self, *args): return _ifcopenshell_wrapper.int_vector___getslice__(self, *args)
    def __setslice__(self, *args): return _ifcopenshell_wrapper.int_vector___setslice__(self, *args)
    def __delslice__(self, *args): return _ifcopenshell_wrapper.int_vector___delslice__(self, *args)
    def __delitem__(self, *args): return _ifcopenshell_wrapper.int_vector___delitem__(self, *args)
    def __getitem__(self, *args): return _ifcopenshell_wrapper.int_vector___getitem__(self, *args)
    def __setitem__(self, *args): return _ifcopenshell_wrapper.int_vector___setitem__(self, *args)
    def append(self, *args): return _ifcopenshell_wrapper.int_vector_append(self, *args)
    def empty(self): return _ifcopenshell_wrapper.int_vector_empty(self)
    def size(self): return _ifcopenshell_wrapper.int_vector_size(self)
    def clear(self): return _ifcopenshell_wrapper.int_vector_clear(self)
    def swap(self, *args): return _ifcopenshell_wrapper.int_vector_swap(self, *args)
    def get_allocator(self): return _ifcopenshell_wrapper.int_vector_get_allocator(self)
    def begin(self): return _ifcopenshell_wrapper.int_vector_begin(self)
    def end(self): return _ifcopenshell_wrapper.int_vector_end(self)
    def rbegin(self): return _ifcopenshell_wrapper.int_vector_rbegin(self)
    def rend(self): return _ifcopenshell_wrapper.int_vector_rend(self)
    def pop_back(self): return _ifcopenshell_wrapper.int_vector_pop_back(self)
    def erase(self, *args): return _ifcopenshell_wrapper.int_vector_erase(self, *args)
    def __init__(self, *args): 
        this = _ifcopenshell_wrapper.new_int_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ifcopenshell_wrapper.int_vector_push_back(self, *args)
    def front(self): return _ifcopenshell_wrapper.int_vector_front(self)
    def back(self): return _ifcopenshell_wrapper.int_vector_back(self)
    def assign(self, *args): return _ifcopenshell_wrapper.int_vector_assign(self, *args)
    def resize(self, *args): return _ifcopenshell_wrapper.int_vector_resize(self, *args)
    def insert(self, *args): return _ifcopenshell_wrapper.int_vector_insert(self, *args)
    def reserve(self, *args): return _ifcopenshell_wrapper.int_vector_reserve(self, *args)
    def capacity(self): return _ifcopenshell_wrapper.int_vector_capacity(self)
    __swig_destroy__ = _ifcopenshell_wrapper.delete_int_vector
    __del__ = lambda self : None;
int_vector_swigregister = _ifcopenshell_wrapper.int_vector_swigregister
int_vector_swigregister(int_vector)

class float_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, float_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, float_vector, name)
    __repr__ = _swig_repr
    def iterator(self): return _ifcopenshell_wrapper.float_vector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ifcopenshell_wrapper.float_vector___nonzero__(self)
    def __bool__(self): return _ifcopenshell_wrapper.float_vector___bool__(self)
    def __len__(self): return _ifcopenshell_wrapper.float_vector___len__(self)
    def pop(self): return _ifcopenshell_wrapper.float_vector_pop(self)
    def __getslice__(self, *args): return _ifcopenshell_wrapper.float_vector___getslice__(self, *args)
    def __setslice__(self, *args): return _ifcopenshell_wrapper.float_vector___setslice__(self, *args)
    def __delslice__(self, *args): return _ifcopenshell_wrapper.float_vector___delslice__(self, *args)
    def __delitem__(self, *args): return _ifcopenshell_wrapper.float_vector___delitem__(self, *args)
    def __getitem__(self, *args): return _ifcopenshell_wrapper.float_vector___getitem__(self, *args)
    def __setitem__(self, *args): return _ifcopenshell_wrapper.float_vector___setitem__(self, *args)
    def append(self, *args): return _ifcopenshell_wrapper.float_vector_append(self, *args)
    def empty(self): return _ifcopenshell_wrapper.float_vector_empty(self)
    def size(self): return _ifcopenshell_wrapper.float_vector_size(self)
    def clear(self): return _ifcopenshell_wrapper.float_vector_clear(self)
    def swap(self, *args): return _ifcopenshell_wrapper.float_vector_swap(self, *args)
    def get_allocator(self): return _ifcopenshell_wrapper.float_vector_get_allocator(self)
    def begin(self): return _ifcopenshell_wrapper.float_vector_begin(self)
    def end(self): return _ifcopenshell_wrapper.float_vector_end(self)
    def rbegin(self): return _ifcopenshell_wrapper.float_vector_rbegin(self)
    def rend(self): return _ifcopenshell_wrapper.float_vector_rend(self)
    def pop_back(self): return _ifcopenshell_wrapper.float_vector_pop_back(self)
    def erase(self, *args): return _ifcopenshell_wrapper.float_vector_erase(self, *args)
    def __init__(self, *args): 
        this = _ifcopenshell_wrapper.new_float_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ifcopenshell_wrapper.float_vector_push_back(self, *args)
    def front(self): return _ifcopenshell_wrapper.float_vector_front(self)
    def back(self): return _ifcopenshell_wrapper.float_vector_back(self)
    def assign(self, *args): return _ifcopenshell_wrapper.float_vector_assign(self, *args)
    def resize(self, *args): return _ifcopenshell_wrapper.float_vector_resize(self, *args)
    def insert(self, *args): return _ifcopenshell_wrapper.float_vector_insert(self, *args)
    def reserve(self, *args): return _ifcopenshell_wrapper.float_vector_reserve(self, *args)
    def capacity(self): return _ifcopenshell_wrapper.float_vector_capacity(self)
    __swig_destroy__ = _ifcopenshell_wrapper.delete_float_vector
    __del__ = lambda self : None;
float_vector_swigregister = _ifcopenshell_wrapper.float_vector_swigregister
float_vector_swigregister(float_vector)

class double_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, double_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, double_vector, name)
    __repr__ = _swig_repr
    def iterator(self): return _ifcopenshell_wrapper.double_vector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ifcopenshell_wrapper.double_vector___nonzero__(self)
    def __bool__(self): return _ifcopenshell_wrapper.double_vector___bool__(self)
    def __len__(self): return _ifcopenshell_wrapper.double_vector___len__(self)
    def pop(self): return _ifcopenshell_wrapper.double_vector_pop(self)
    def __getslice__(self, *args): return _ifcopenshell_wrapper.double_vector___getslice__(self, *args)
    def __setslice__(self, *args): return _ifcopenshell_wrapper.double_vector___setslice__(self, *args)
    def __delslice__(self, *args): return _ifcopenshell_wrapper.double_vector___delslice__(self, *args)
    def __delitem__(self, *args): return _ifcopenshell_wrapper.double_vector___delitem__(self, *args)
    def __getitem__(self, *args): return _ifcopenshell_wrapper.double_vector___getitem__(self, *args)
    def __setitem__(self, *args): return _ifcopenshell_wrapper.double_vector___setitem__(self, *args)
    def append(self, *args): return _ifcopenshell_wrapper.double_vector_append(self, *args)
    def empty(self): return _ifcopenshell_wrapper.double_vector_empty(self)
    def size(self): return _ifcopenshell_wrapper.double_vector_size(self)
    def clear(self): return _ifcopenshell_wrapper.double_vector_clear(self)
    def swap(self, *args): return _ifcopenshell_wrapper.double_vector_swap(self, *args)
    def get_allocator(self): return _ifcopenshell_wrapper.double_vector_get_allocator(self)
    def begin(self): return _ifcopenshell_wrapper.double_vector_begin(self)
    def end(self): return _ifcopenshell_wrapper.double_vector_end(self)
    def rbegin(self): return _ifcopenshell_wrapper.double_vector_rbegin(self)
    def rend(self): return _ifcopenshell_wrapper.double_vector_rend(self)
    def pop_back(self): return _ifcopenshell_wrapper.double_vector_pop_back(self)
    def erase(self, *args): return _ifcopenshell_wrapper.double_vector_erase(self, *args)
    def __init__(self, *args): 
        this = _ifcopenshell_wrapper.new_double_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ifcopenshell_wrapper.double_vector_push_back(self, *args)
    def front(self): return _ifcopenshell_wrapper.double_vector_front(self)
    def back(self): return _ifcopenshell_wrapper.double_vector_back(self)
    def assign(self, *args): return _ifcopenshell_wrapper.double_vector_assign(self, *args)
    def resize(self, *args): return _ifcopenshell_wrapper.double_vector_resize(self, *args)
    def insert(self, *args): return _ifcopenshell_wrapper.double_vector_insert(self, *args)
    def reserve(self, *args): return _ifcopenshell_wrapper.double_vector_reserve(self, *args)
    def capacity(self): return _ifcopenshell_wrapper.double_vector_capacity(self)
    __swig_destroy__ = _ifcopenshell_wrapper.delete_double_vector
    __del__ = lambda self : None;
double_vector_swigregister = _ifcopenshell_wrapper.double_vector_swigregister
double_vector_swigregister(double_vector)

class string_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, string_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, string_vector, name)
    __repr__ = _swig_repr
    def iterator(self): return _ifcopenshell_wrapper.string_vector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ifcopenshell_wrapper.string_vector___nonzero__(self)
    def __bool__(self): return _ifcopenshell_wrapper.string_vector___bool__(self)
    def __len__(self): return _ifcopenshell_wrapper.string_vector___len__(self)
    def pop(self): return _ifcopenshell_wrapper.string_vector_pop(self)
    def __getslice__(self, *args): return _ifcopenshell_wrapper.string_vector___getslice__(self, *args)
    def __setslice__(self, *args): return _ifcopenshell_wrapper.string_vector___setslice__(self, *args)
    def __delslice__(self, *args): return _ifcopenshell_wrapper.string_vector___delslice__(self, *args)
    def __delitem__(self, *args): return _ifcopenshell_wrapper.string_vector___delitem__(self, *args)
    def __getitem__(self, *args): return _ifcopenshell_wrapper.string_vector___getitem__(self, *args)
    def __setitem__(self, *args): return _ifcopenshell_wrapper.string_vector___setitem__(self, *args)
    def append(self, *args): return _ifcopenshell_wrapper.string_vector_append(self, *args)
    def empty(self): return _ifcopenshell_wrapper.string_vector_empty(self)
    def size(self): return _ifcopenshell_wrapper.string_vector_size(self)
    def clear(self): return _ifcopenshell_wrapper.string_vector_clear(self)
    def swap(self, *args): return _ifcopenshell_wrapper.string_vector_swap(self, *args)
    def get_allocator(self): return _ifcopenshell_wrapper.string_vector_get_allocator(self)
    def begin(self): return _ifcopenshell_wrapper.string_vector_begin(self)
    def end(self): return _ifcopenshell_wrapper.string_vector_end(self)
    def rbegin(self): return _ifcopenshell_wrapper.string_vector_rbegin(self)
    def rend(self): return _ifcopenshell_wrapper.string_vector_rend(self)
    def pop_back(self): return _ifcopenshell_wrapper.string_vector_pop_back(self)
    def erase(self, *args): return _ifcopenshell_wrapper.string_vector_erase(self, *args)
    def __init__(self, *args): 
        this = _ifcopenshell_wrapper.new_string_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ifcopenshell_wrapper.string_vector_push_back(self, *args)
    def front(self): return _ifcopenshell_wrapper.string_vector_front(self)
    def back(self): return _ifcopenshell_wrapper.string_vector_back(self)
    def assign(self, *args): return _ifcopenshell_wrapper.string_vector_assign(self, *args)
    def resize(self, *args): return _ifcopenshell_wrapper.string_vector_resize(self, *args)
    def insert(self, *args): return _ifcopenshell_wrapper.string_vector_insert(self, *args)
    def reserve(self, *args): return _ifcopenshell_wrapper.string_vector_reserve(self, *args)
    def capacity(self): return _ifcopenshell_wrapper.string_vector_capacity(self)
    __swig_destroy__ = _ifcopenshell_wrapper.delete_string_vector
    __del__ = lambda self : None;
string_vector_swigregister = _ifcopenshell_wrapper.string_vector_swigregister
string_vector_swigregister(string_vector)

class material_vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, material_vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, material_vector, name)
    __repr__ = _swig_repr
    def iterator(self): return _ifcopenshell_wrapper.material_vector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ifcopenshell_wrapper.material_vector___nonzero__(self)
    def __bool__(self): return _ifcopenshell_wrapper.material_vector___bool__(self)
    def __len__(self): return _ifcopenshell_wrapper.material_vector___len__(self)
    def pop(self): return _ifcopenshell_wrapper.material_vector_pop(self)
    def __getslice__(self, *args): return _ifcopenshell_wrapper.material_vector___getslice__(self, *args)
    def __setslice__(self, *args): return _ifcopenshell_wrapper.material_vector___setslice__(self, *args)
    def __delslice__(self, *args): return _ifcopenshell_wrapper.material_vector___delslice__(self, *args)
    def __delitem__(self, *args): return _ifcopenshell_wrapper.material_vector___delitem__(self, *args)
    def __getitem__(self, *args): return _ifcopenshell_wrapper.material_vector___getitem__(self, *args)
    def __setitem__(self, *args): return _ifcopenshell_wrapper.material_vector___setitem__(self, *args)
    def append(self, *args): return _ifcopenshell_wrapper.material_vector_append(self, *args)
    def empty(self): return _ifcopenshell_wrapper.material_vector_empty(self)
    def size(self): return _ifcopenshell_wrapper.material_vector_size(self)
    def clear(self): return _ifcopenshell_wrapper.material_vector_clear(self)
    def swap(self, *args): return _ifcopenshell_wrapper.material_vector_swap(self, *args)
    def get_allocator(self): return _ifcopenshell_wrapper.material_vector_get_allocator(self)
    def begin(self): return _ifcopenshell_wrapper.material_vector_begin(self)
    def end(self): return _ifcopenshell_wrapper.material_vector_end(self)
    def rbegin(self): return _ifcopenshell_wrapper.material_vector_rbegin(self)
    def rend(self): return _ifcopenshell_wrapper.material_vector_rend(self)
    def pop_back(self): return _ifcopenshell_wrapper.material_vector_pop_back(self)
    def erase(self, *args): return _ifcopenshell_wrapper.material_vector_erase(self, *args)
    def __init__(self, *args): 
        this = _ifcopenshell_wrapper.new_material_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ifcopenshell_wrapper.material_vector_push_back(self, *args)
    def front(self): return _ifcopenshell_wrapper.material_vector_front(self)
    def back(self): return _ifcopenshell_wrapper.material_vector_back(self)
    def assign(self, *args): return _ifcopenshell_wrapper.material_vector_assign(self, *args)
    def resize(self, *args): return _ifcopenshell_wrapper.material_vector_resize(self, *args)
    def insert(self, *args): return _ifcopenshell_wrapper.material_vector_insert(self, *args)
    def reserve(self, *args): return _ifcopenshell_wrapper.material_vector_reserve(self, *args)
    def capacity(self): return _ifcopenshell_wrapper.material_vector_capacity(self)
    __swig_destroy__ = _ifcopenshell_wrapper.delete_material_vector
    __del__ = lambda self : None;
material_vector_swigregister = _ifcopenshell_wrapper.material_vector_swigregister
material_vector_swigregister(material_vector)

# This file is compatible with both classic and new-style classes.


