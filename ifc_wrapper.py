# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

# TK: NB: Changes are made to facilitate loading appropriate binary for current platform

from sys import version_info
if version_info >= (2,6,0):
    def get_search_path():
        import os, platform
        dn = os.path.dirname(__file__)
        if os.path.exists(os.path.join(dn, 'lib')):
            dn = os.path.join(dn, 'lib', '.'.join(platform.python_version_tuple()[:2]), platform.system(), platform.architecture()[0])
        return dn
    def swig_import_helper():
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ifc_wrapper', [get_search_path()])
        except ImportError:
            import _ifc_wrapper
            return _ifc_wrapper
        if fp is not None:
            try:
                _mod = imp.load_module('_ifc_wrapper', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ifc_wrapper = swig_import_helper()
    del swig_import_helper
    del get_search_path
else:
    import _ifc_wrapper
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ifc_wrapper.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _ifc_wrapper.SwigPyIterator_value(self)
    def incr(self, n=1): return _ifc_wrapper.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _ifc_wrapper.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _ifc_wrapper.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _ifc_wrapper.SwigPyIterator_equal(self, *args)
    def copy(self): return _ifc_wrapper.SwigPyIterator_copy(self)
    def next(self): return _ifc_wrapper.SwigPyIterator_next(self)
    def __next__(self): return _ifc_wrapper.SwigPyIterator___next__(self)
    def previous(self): return _ifc_wrapper.SwigPyIterator_previous(self)
    def advance(self, *args): return _ifc_wrapper.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _ifc_wrapper.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _ifc_wrapper.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _ifc_wrapper.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _ifc_wrapper.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _ifc_wrapper.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _ifc_wrapper.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _ifc_wrapper.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class entity_instance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, entity_instance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, entity_instance, name)
    def __init__(self, *args): 
        this = _ifc_wrapper.new_entity_instance(*args)
        try: self.this.append(this)
        except: self.this = this
    def is_a(self, *args): return _ifc_wrapper.entity_instance_is_a(self, *args)
    def __len__(self): return _ifc_wrapper.entity_instance___len__(self)
    def get_argument_type(self, *args): return _ifc_wrapper.entity_instance_get_argument_type(self, *args)
    def get_argument_name(self, *args): return _ifc_wrapper.entity_instance_get_argument_name(self, *args)
    def get_argument_index(self, *args): return _ifc_wrapper.entity_instance_get_argument_index(self, *args)
    def get_inverse(self, *args): return _ifc_wrapper.entity_instance_get_inverse(self, *args)
    def _set_argument(self, *args): return _ifc_wrapper.entity_instance__set_argument(self, *args)
    def __repr__(self): return _ifc_wrapper.entity_instance___repr__(self)
    def get_argument(self, *args): return _ifc_wrapper.entity_instance_get_argument(self, *args)
    def is_valid(self): return _ifc_wrapper.entity_instance_is_valid(self)
    set_argument = lambda self,x,y: self._set_argument(x) if y is None else self._set_argument(x,y)

    __swig_destroy__ = _ifc_wrapper.delete_entity_instance
    __del__ = lambda self : None;
entity_instance_swigregister = _ifc_wrapper.entity_instance_swigregister
entity_instance_swigregister(entity_instance)

class file(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, file, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, file, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stream"] = _ifc_wrapper.file_stream_set
    __swig_getmethods__["stream"] = _ifc_wrapper.file_stream_get
    if _newclass:stream = _swig_property(_ifc_wrapper.file_stream_get, _ifc_wrapper.file_stream_set)
    __swig_setmethods__["tokens"] = _ifc_wrapper.file_tokens_set
    __swig_getmethods__["tokens"] = _ifc_wrapper.file_tokens_get
    if _newclass:tokens = _swig_property(_ifc_wrapper.file_tokens_get, _ifc_wrapper.file_tokens_set)
    def by_type(self, *args): return _ifc_wrapper.file_by_type(self, *args)
    def __init__(self): 
        this = _ifc_wrapper.new_file()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ifc_wrapper.delete_file
    __del__ = lambda self : None;
    def by_id(self, *args): return _ifc_wrapper.file_by_id(self, *args)
    def by_guid(self, *args): return _ifc_wrapper.file_by_guid(self, *args)
    def add(self, *args): return _ifc_wrapper.file_add(self, *args)
    def write(self, *args): return _ifc_wrapper.file_write(self, *args)
file_swigregister = _ifc_wrapper.file_swigregister
file_swigregister(file)


def open(*args):
  return _ifc_wrapper.open(*args)
open = _ifc_wrapper.open

def create_shape(*args):
  return _ifc_wrapper.create_shape(*args)
create_shape = _ifc_wrapper.create_shape

def clean():
  return _ifc_wrapper.clean()
clean = _ifc_wrapper.clean
class ints(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ints, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ints, name)
    __repr__ = _swig_repr
    def iterator(self): return _ifc_wrapper.ints_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ifc_wrapper.ints___nonzero__(self)
    def __bool__(self): return _ifc_wrapper.ints___bool__(self)
    def __len__(self): return _ifc_wrapper.ints___len__(self)
    def pop(self): return _ifc_wrapper.ints_pop(self)
    def __getslice__(self, *args): return _ifc_wrapper.ints___getslice__(self, *args)
    def __setslice__(self, *args): return _ifc_wrapper.ints___setslice__(self, *args)
    def __delslice__(self, *args): return _ifc_wrapper.ints___delslice__(self, *args)
    def __delitem__(self, *args): return _ifc_wrapper.ints___delitem__(self, *args)
    def __getitem__(self, *args): return _ifc_wrapper.ints___getitem__(self, *args)
    def __setitem__(self, *args): return _ifc_wrapper.ints___setitem__(self, *args)
    def append(self, *args): return _ifc_wrapper.ints_append(self, *args)
    def empty(self): return _ifc_wrapper.ints_empty(self)
    def size(self): return _ifc_wrapper.ints_size(self)
    def clear(self): return _ifc_wrapper.ints_clear(self)
    def swap(self, *args): return _ifc_wrapper.ints_swap(self, *args)
    def get_allocator(self): return _ifc_wrapper.ints_get_allocator(self)
    def begin(self): return _ifc_wrapper.ints_begin(self)
    def end(self): return _ifc_wrapper.ints_end(self)
    def rbegin(self): return _ifc_wrapper.ints_rbegin(self)
    def rend(self): return _ifc_wrapper.ints_rend(self)
    def pop_back(self): return _ifc_wrapper.ints_pop_back(self)
    def erase(self, *args): return _ifc_wrapper.ints_erase(self, *args)
    def __init__(self, *args): 
        this = _ifc_wrapper.new_ints(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ifc_wrapper.ints_push_back(self, *args)
    def front(self): return _ifc_wrapper.ints_front(self)
    def back(self): return _ifc_wrapper.ints_back(self)
    def assign(self, *args): return _ifc_wrapper.ints_assign(self, *args)
    def resize(self, *args): return _ifc_wrapper.ints_resize(self, *args)
    def insert(self, *args): return _ifc_wrapper.ints_insert(self, *args)
    def reserve(self, *args): return _ifc_wrapper.ints_reserve(self, *args)
    def capacity(self): return _ifc_wrapper.ints_capacity(self)
    __swig_destroy__ = _ifc_wrapper.delete_ints
    __del__ = lambda self : None;
ints_swigregister = _ifc_wrapper.ints_swigregister
ints_swigregister(ints)
cvar = _ifc_wrapper.cvar
DISABLE_OPENING_SUBTRACTIONS = cvar.DISABLE_OPENING_SUBTRACTIONS
DISABLE_OBJECT_PLACEMENT = cvar.DISABLE_OBJECT_PLACEMENT
SEW_SHELLS = cvar.SEW_SHELLS

class doubles(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubles, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubles, name)
    __repr__ = _swig_repr
    def iterator(self): return _ifc_wrapper.doubles_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ifc_wrapper.doubles___nonzero__(self)
    def __bool__(self): return _ifc_wrapper.doubles___bool__(self)
    def __len__(self): return _ifc_wrapper.doubles___len__(self)
    def pop(self): return _ifc_wrapper.doubles_pop(self)
    def __getslice__(self, *args): return _ifc_wrapper.doubles___getslice__(self, *args)
    def __setslice__(self, *args): return _ifc_wrapper.doubles___setslice__(self, *args)
    def __delslice__(self, *args): return _ifc_wrapper.doubles___delslice__(self, *args)
    def __delitem__(self, *args): return _ifc_wrapper.doubles___delitem__(self, *args)
    def __getitem__(self, *args): return _ifc_wrapper.doubles___getitem__(self, *args)
    def __setitem__(self, *args): return _ifc_wrapper.doubles___setitem__(self, *args)
    def append(self, *args): return _ifc_wrapper.doubles_append(self, *args)
    def empty(self): return _ifc_wrapper.doubles_empty(self)
    def size(self): return _ifc_wrapper.doubles_size(self)
    def clear(self): return _ifc_wrapper.doubles_clear(self)
    def swap(self, *args): return _ifc_wrapper.doubles_swap(self, *args)
    def get_allocator(self): return _ifc_wrapper.doubles_get_allocator(self)
    def begin(self): return _ifc_wrapper.doubles_begin(self)
    def end(self): return _ifc_wrapper.doubles_end(self)
    def rbegin(self): return _ifc_wrapper.doubles_rbegin(self)
    def rend(self): return _ifc_wrapper.doubles_rend(self)
    def pop_back(self): return _ifc_wrapper.doubles_pop_back(self)
    def erase(self, *args): return _ifc_wrapper.doubles_erase(self, *args)
    def __init__(self, *args): 
        this = _ifc_wrapper.new_doubles(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ifc_wrapper.doubles_push_back(self, *args)
    def front(self): return _ifc_wrapper.doubles_front(self)
    def back(self): return _ifc_wrapper.doubles_back(self)
    def assign(self, *args): return _ifc_wrapper.doubles_assign(self, *args)
    def resize(self, *args): return _ifc_wrapper.doubles_resize(self, *args)
    def insert(self, *args): return _ifc_wrapper.doubles_insert(self, *args)
    def reserve(self, *args): return _ifc_wrapper.doubles_reserve(self, *args)
    def capacity(self): return _ifc_wrapper.doubles_capacity(self)
    __swig_destroy__ = _ifc_wrapper.delete_doubles
    __del__ = lambda self : None;
doubles_swigregister = _ifc_wrapper.doubles_swigregister
doubles_swigregister(doubles)

class strings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, strings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, strings, name)
    __repr__ = _swig_repr
    def iterator(self): return _ifc_wrapper.strings_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ifc_wrapper.strings___nonzero__(self)
    def __bool__(self): return _ifc_wrapper.strings___bool__(self)
    def __len__(self): return _ifc_wrapper.strings___len__(self)
    def pop(self): return _ifc_wrapper.strings_pop(self)
    def __getslice__(self, *args): return _ifc_wrapper.strings___getslice__(self, *args)
    def __setslice__(self, *args): return _ifc_wrapper.strings___setslice__(self, *args)
    def __delslice__(self, *args): return _ifc_wrapper.strings___delslice__(self, *args)
    def __delitem__(self, *args): return _ifc_wrapper.strings___delitem__(self, *args)
    def __getitem__(self, *args): return _ifc_wrapper.strings___getitem__(self, *args)
    def __setitem__(self, *args): return _ifc_wrapper.strings___setitem__(self, *args)
    def append(self, *args): return _ifc_wrapper.strings_append(self, *args)
    def empty(self): return _ifc_wrapper.strings_empty(self)
    def size(self): return _ifc_wrapper.strings_size(self)
    def clear(self): return _ifc_wrapper.strings_clear(self)
    def swap(self, *args): return _ifc_wrapper.strings_swap(self, *args)
    def get_allocator(self): return _ifc_wrapper.strings_get_allocator(self)
    def begin(self): return _ifc_wrapper.strings_begin(self)
    def end(self): return _ifc_wrapper.strings_end(self)
    def rbegin(self): return _ifc_wrapper.strings_rbegin(self)
    def rend(self): return _ifc_wrapper.strings_rend(self)
    def pop_back(self): return _ifc_wrapper.strings_pop_back(self)
    def erase(self, *args): return _ifc_wrapper.strings_erase(self, *args)
    def __init__(self, *args): 
        this = _ifc_wrapper.new_strings(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ifc_wrapper.strings_push_back(self, *args)
    def front(self): return _ifc_wrapper.strings_front(self)
    def back(self): return _ifc_wrapper.strings_back(self)
    def assign(self, *args): return _ifc_wrapper.strings_assign(self, *args)
    def resize(self, *args): return _ifc_wrapper.strings_resize(self, *args)
    def insert(self, *args): return _ifc_wrapper.strings_insert(self, *args)
    def reserve(self, *args): return _ifc_wrapper.strings_reserve(self, *args)
    def capacity(self): return _ifc_wrapper.strings_capacity(self)
    __swig_destroy__ = _ifc_wrapper.delete_strings
    __del__ = lambda self : None;
strings_swigregister = _ifc_wrapper.strings_swigregister
strings_swigregister(strings)

# This file is compatible with both classic and new-style classes.


